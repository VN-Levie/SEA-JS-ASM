Về bigint trong js:
 Vần dùng khi  có 1 số rất lớn mà Number.MAX_SAFE_INTEGER ≈ 9,007,199,254,740,991 không "chứa" nổi.
 Có hệu tố n. ví dụ: const big = 1234567890123456789012345678901234567890n;
 Cách khai bác khác: const another = BigInt("12345678901234567890");
 Cần phải ép keiu63 khi đưa về int và ngược lại: Number(big); BigInt(10);
 Hỗ trợ toán tử bình thường giữa 2 bigint với nhsu, nhưng ko thể dùng toán tử giữa int và bigint.

Về IEEE 754 trong js:
 Là chuẩn do Viện Kỹ sư Điện và Điện tử Hoa Kỳ (IEEE) ban hành nhằm chuẩn hoá cách biểu diễn số thực trong máy tính.
 Mục tiêu:
  Chuẩn hóa cách lưu trữ số thực để đảm bảo tính tương thích giữa các hệ thống, phần mềm và phần cứng
  Hỗ trợ các phép toán như cộng, trừ, nhân, chia, căn bậc hai,... trên số thực với độ chính xác và quy tắc làm tròn nhất quán
 2 dạng chính: 
  - Đơn: 32 bit (single precision)
  - Kép: 64 bit (double precision)
 Một vài giá trị đặc biệt:
  - Infinity: đại diện cho giá trị vô cực
  - 0.0, -0.0
  - NaN: đại diện cho giá trị không phải là số (Not a Number)
  - Denormalized numbers: số quá nhỏ không thể được biểu diễn chính xác trong định dạng chuẩn
  - Subnormal numbers: số quá nhỏ không thể được biểu diễn chính xác trong định dạng chuẩn

  vềk hi destructuring một object có object lồng bên trong: JavaScript sẽ giải nén đúng theo cấu trúc. Nếu không tạo deep clone thì vẫn là tham chiếu (reference).